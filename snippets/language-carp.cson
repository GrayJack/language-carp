'.source.carp':
  # Library loading
  'use':
    'prefix': 'use'
    'body': '(use ${1:module})'

  'load':
    'prefix': 'load'
    'body': '(load ${1:git_module})'

  'system-include':
    'prefix': 'sys-inc'
    'body': '(system-include "${1:c_module}")'

  'local-include':
    'prefix': 'loc-inc'
    'body': '(local-include "${1:c_module}")'

  # Variable bindings
  'def':
    'prefix': 'def'
    'body': '(def ${1:symbol} ${2:value})'

  'the':
    'prefix': 'the'
    'body': '(the ${1:type} ${2:var})'

  'set!':
    'prefix': 'set!'
    'body': '(set! ${1:var} ${2:value})'

  'let':
    'prefix': 'let'
    'body': """
      (let [${1:bindings}]
      \t${2:body})
    """

  # Function bindings
  'defn':
    'prefix': 'defn'
    'body': """
      (defn ${1:name}
      \t[${2:params}]
      \t${3:body})
    """

  'fn':
    'prefix': 'fn'
    'body': """
      (fn [${1:params}]
      \t${2:body})$0
    """

  # Macro bindings
  'macro':
    'prefix': 'macro'
    'body': """
      (defmacro ${1:name}
      \t[${2:params}]
      \t${3:more})
    """

  # Structs and Modules
  'struct':
    'prefix': 'struct'
    'body': """
      (deftype ${1:name}
      \t[${2:params}]
    """

  'interface':
    'prefix': 'interface'
    'body': '(definterface ${1:name} (${2:Fn}))'

  'module':
    'prefix': 'module'
    'body': """
      (defmodule ${1:name}
      \t${2:def1}
      \t${3:more_defs})
    """

  # Conditionals
  'if':
    'prefix': 'if'
    'body': """
      (if ${1:bool}
      \t${2:then}
      \t${3:else})
    """

  'if-let':
    'prefix': 'ifl'
    'body': """
      (if-let [${1:bindings}]
      \t${2:then}
      \t${3:else})
    """

  'if-not':
    'prefix': 'ifn'
    'body': """
      (if-not ${1:bool}
      \t${2:then}
      \t${3:else})
    """

  'when':
    'prefix': 'when'
    'body': """
      (when ${1:bool}
      \t${2:body})
    """

  'when-let':
    'prefix': 'whenl'
    'body': """
      (when-let [${1:bindings}]
      \t${2:body})
    """

  'when-not':
    'prefix': 'whenn'
    'body': """
      (when-not ${1:bool}
      \t${2:body})
    """

  'unless':
    'prefix': 'unless'
    'body': """
      (unless ${1:bool}
      \t${2:body})
    """

  'cond':
    'prefix': 'cond'
    'body': """
      (cond
      \t${1:bool} ${2:expr}
      \t$0)
    """

  'case':
    'prefix': 'case'
    'body': """
      (case ${1:dispatch}
      \t${2:bool} ${3:expr}
      \t$0)
    """

  'match':
    'prefix': 'match'
    'body': """
      (match ${1:x}
      \t${2:cases}
      \t$0)
    """

  # Functional paradigm functions
  'endo-filter':
    'prefix': 'filter'
    'body': '(endo-filter ${1:bool} ${2:indexed})'

  'endo-map':
    'prefix': 'map'
    'body': '(endo-map ${1:function} ${2:indexed})'

  'copy-filter':
    'prefix': 'cfilter'
    'body': '(copy-filter ${1:bool} ${2:indexed})'

  'copy-map':
    'prefix': 'cmap'
    'body': '(copy-map ${1:function} ${2:indexed})'

  'reduce':
    'prefix': 'reduce'
    'body': '(reduce ${1:function} ${2:init} ${3:indexed})'

  'fold':
    'prefix': 'fold'
    'body': '(reduce ${1:function} ${2:init} ${3:indexed})'

  # Iterator and Imperative Loops
  'while':
    'prefix': 'while'
    'body': """
      (while ${1:bool}
      \t${2:body})
    """

  'each':
    'prefix': 'each'
    'body': """
      (each ${1:bind} ${2:indexed}
      \t${3:body})
    """

  'for':
    'prefix': 'for'
    'body': """
      (for [${1:binding}] ${2:start} ${3:end}
      \t${4:body})
    """

  'seq':
    'prefix': 'seq'
    'body': """
      (seq [${1:head}]
      \t${2:body})
    """

  # Data structure functions
  'length':
    'prefix': 'len'
    'body': '(length ${1:data_structure})'

  # Prints
  'print':
    'prefix': 'print'
    'body': '(print $1)'

  'println':
    'prefix': 'println'
    'body': '(println $1)'

  # Functions
