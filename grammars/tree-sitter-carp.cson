name: 'Carp'
scopeName: 'source.carp'
type: 'tree-sitter'
parser: 'tree-sitter-carp'

fileTypes: [
  'carp'
]

comments:
  start: '; '

folds: [
  {
    start: {index: 0, type: '{'}
    end: {index: -1, type: '}'}
  }
  {
    start: {index: 0, type: '['}
    end: {index: -1, type: ']'}
  }
  {
    start: {index: 0, type: '('}
    end: {index: -1, type: ')'}
  }
]

scopes:
    'source_file': 'source.carp'

    'line_comment' : 'comment.line'
    'quote' : 'support.quote'

    '''
        module_symbol,
        scoped_module > symbol,
    ''' : 'support.module'

    '''
        register > symbol,
        register > scoped_identifier > symbol,
        defn > symbol,
        defndynamic > symbol,
        definterface > symbol,
        deftemplate > symbol,
        defmacro > symbol,
        doc > symbol,
        doc > scoped_identifier > symbol,
        signature > symbol,
        signature > scoped_identifier > symbol,
        hidden > symbol,
        hidden > scoped_identifier > symbol,
        private > symbol,
        private > scoped_identifier > symbol,
    ''' : 'entity.name.function.def'

    '''
        call > scoped_identifier:nth-child(1) > symbol,
        call > symbol:nth-child(1),
        short_fn_ref > symbol,
    ''' : [
        {match: '^[A-Z\\d_]{1,}.+$', scopes: 'entity.name.enum'},
        {match: '^(<|<=|%|=|>|>=|\\+|\\-|\\*|\\/|and|and\\*|or|or\\*|not|/=)$', scopes: 'keyword.operator'},
        {match: '^(for|break|defdynamic|let\\-do|while\\-do|defn\\-do|load|system\\-include|local\\-include|register\\-type)$', scopes: 'keyword.other'},
        'entity.name.function.call'
    ]

    'variant_symbol' : 'entity.name.enum'

    'meta_symbol' : 'variable.other.meta'

    '''
        type > symbol,
        complex_type > symbol,
        type_symbol,
        core_types
    ''' : 'support.type'

    'deftype > identifier' : [{match: '^[A-ZΑ-Ω]', scopes: 'support.type'}]

    '''
        interface_fn > "Fn",
        interface_fn > "λ",
    ''' : 'support.type.func'

    '''
        parameters > symbol,
        parameters > keyword,
    ''' : 'entity.name.variable.parameter'

    '''
        identifier,
    ''' : [
        {match: '^[A-Z\\d_]{2,}$', scopes: 'constant.other'},
    ]

    'keyword' : 'support.variable.contant.key'

    'short_ref > "&"' : 'support.reference'
    'short_copy > "@"' : 'support.copy'
    'short_fn_ref > "~"' : 'support.fn_ref'
    'short_quote > "\'"' : 'support.quote'

    '"doc"' : 'entity.attribute.doc'
    '"hidden"' : 'entity.attribute.hidden'
    '"sig"' : 'entity.attribute.sig'
    '"private"' : 'entity.attribute.private'

    '"def"' : 'storage.modifier.def'
    '"let"' : 'storage.modifier.let'
    '"sig"' : 'storage.modifier.sig'
    '"defn"' : 'storage.modifier.defn'
    '"deftype"'  : 'storage.modifier.deftype'
    '"defmacro"' : 'storage.modifier.defmacro'
    '"register"' : 'storage.modifier.register'
    '"defmodule"' : 'storage.modifier.defmodule'
    '"definterface"' : 'storage.modifier.definterface'
    '"defndynamic"'  : 'storage.modifier.defndynamic'
    '"deftemplate"'  : 'storage.modifier.deftemplate'
    '"register-type"' : 'storage.modifier.register_type'
    '"local-include"' : 'storage.modifier.include.local'
    '"system-include"' : 'storage.modifier.include.system'

    '"if"' : 'keyword.control.if'
    '"do"' : 'keyword.control.do'
    '"fn"' : 'keyword.control.fn'
    '"ref"' : 'keyword.control.ref'
    '"the"' : 'keyword.control.the'
    '"use"' : 'keyword.control.use'
    '"set!"' : 'keyword.control.set!'
    '"load"' : 'keyword.control.defn'
    '"with"' : 'keyword.control.with'
    '"while"' : 'keyword.control.while'
    '"match"' : 'keyword.control.match'
    '"address"' : 'keyword.control.address'

    '"("': 'punctuation.definition.parameters.begin.bracket.round'
    '")"': 'punctuation.definition.parameters.end.bracket.round'
    '"["': 'punctuation.definition.array.begin.bracket.square'
    '"]"': 'punctuation.definition.array.end.bracket.square'

    'unit' : 'constant.unit'
    'str_literal' : 'string.quoted.double'
    'pattern_literal': 'string.quoted.double.pattern'
    'char_literal' : 'string.quoted.single'
    'bool_literal' : 'constant.language.boolean'
    'float_literal': 'constant.number.float'
    'integer_literal': 'constant.number.integer'
    'escape_sequence' : 'constant.character.escape'
